
import pkg_resources
import unittest
import uuid

import pandas as pd
import qiime2.core.archive as archive
from qiime2.sdk import Artifact

from q2_winnowing.plugin_setup import Winnowed
from q2_winnowing._format import ( WinnowedDirectoryFormat, WinnowedFeatureOrderingFormat,
                                   WinnowedAucOrderingFormat, WinnowedPermanovaOrderingFormat )
import q2_winnowing._transformer
import q2_winnowing._type

exp_featureOrdering = pd.DataFrame(
    data=[[False,"-name-_1_1_","graph_centrality","betweenness",1,25,3,"sliding_window","add_one",0.5,"spearman",True,"both",2760.5702665330027,0.09688013136288998,0.47058823529411764,"Otu5330","Otu4626","Otu6188","Otu6434","Otu4238","Otu5737","Otu3245","Otu5484","Otu6390",'Otu6747',"Otu6264","Otu6602","Otu6306",'Otu6284','Otu5981',"Otu6671","Otu4727","Otu6326","Otu6199","Otu4164","Otu5267","Otu6344","Otu5313","Otu0728","Otu5584"],
          [False,"-name-_1_4_","graph_centrality","betweenness",4,25,3,"sliding_window","add_one",0.5,"spearman",True,"both",421.0375310439995,0.13651315789473684,0.5151515151515151,"Otu5330","Otu4626","Otu6434","Otu6188","Otu4238","Otu5737","Otu3245","Otu5484","Otu6390",'Otu6326',"Otu6747","Otu6602","Otu6264",'Otu6284','Otu4727',"Otu5981","Otu6671","Otu6306","Otu4164","Otu4706","Otu5270","Otu6199","Otu6344","Otu5267","Otu0728"],
          [False,"-name-_1_16_","graph_centrality","betweenness",16,25,3,"sliding_window","add_one",0.5,"spearman",True,"both",128.871447255995,0.66996699669967,0.6129032258064516,"Otu5330","Otu4626","Otu6434","Otu6188","Otu5737","Otu3245","Otu6326","Otu4238","Otu5484","Otu6747","Otu5538","Otu6264","Otu4706","Otu4164","Otu6284","Otu6210","Otu6390","Otu6602","Otu5981","Otu6306","Otu6199","Otu6671","Otu5270","Otu6448","Otu6544"],
          [False,"-name-_1_64_","graph_centrality","betweenness",64,25,3,"sliding_window","add_one",0.5,"spearman",True,"both",68.40203193300113,1.0,1.0,"Otu5330","Otu4626","Otu6434","Otu6188","Otu5737","Otu3245","Otu6326","Otu4238","Otu5484","Otu6747","Otu5538","Otu6264","Otu4706","Otu4164","Otu6284","Otu6210","Otu3798","Otu6602","Otu5520","Otu6697","Otu6736","Otu6390","Otu1133","Otu6306","Otu6279"],
          [False,"-name-_1_128_","graph_centrality","betweenness",128,25,3,"sliding_window","add_one",0.5,"spearman",True,"both",68.50248471400118,1.0,1.0,"Otu5330","Otu4626","Otu6434",'Otu6188',"Otu5737","Otu3245","Otu6326","Otu4238","Otu5484","Otu6747","Otu5538","Otu6264","Otu4706","Otu4164","Otu6284","Otu6210","Otu3798","Otu6602","Otu5520","Otu6697","Otu6736","Otu6390","Otu1133","Otu6306","Otu6279"]],
    columns=["ab_comp","dataframe1","metric","centrality","iteration select","total select","min count","smooth type","conditioning","keep threshold","correlation","weighted","correlation property","run time","kappa","agreement",1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]
)
exp_permanova = pd.DataFrame(
    data=[["auc1",1,1,1.517518014,1.517518014,5.186579863,0.084766625,0.004,3,0.572329632], ["auc2",2,2,1.517518014,1.517518014,5.186579863,0.084766625,0.011,3,0.572329632],
          ["auc3",3,3,1.517518014,1.517518014,5.186579863,0.084766625,0.004,3,0.572329632], ["auc4",4,4,1.517518014,1.517518014,5.186579863,0.084766625,0.007,3,0.572329632],
          ["auc5",5,5,1.517518014,1.517518014,5.186579863,0.084766625,0.009,3,0.572329632], ["auc6",6,6,1.517518014,1.517518014,5.186579863,0.084766625,0.011,3,0.572329632],
          ["auc7",7,7,1.13804373,1.13804373,4.028801206,0.06711447,0.013,4,0], ["auc8",8,8,1.13804373,1.13804373,4.028801206,0.06711447,0.02,4,0],
          ["auc9",9,9,1.13804373,1.13804373,4.028801206,0.06711447,0.011,4,0], ["auc10",10,10,1.13804373,1.13804373,4.028801206,0.06711447,0.012,4,0],
          ["auc11",11,11,1.13804373,1.13804373,4.028801206,0.06711447,0.011,4,0], ["auc12",12,12,1.13804373,1.13804373,4.028801206,0.06711447,0.022,4,0],
          ["auc13",13,13,1.13804373,1.13804373,4.028801206,0.06711447,0.013,4,0], ['auc14',14,14,1.917404899,1.917404899,5.977790872,0.096450532,0.002,5,0.963452324],
          ["auc15",15,15,1.917404899,1.917404899,5.977790872,0.096450532,0.002,5,0.963452324], ["auc16",16,16,1.917404899,1.917404899,5.977790872,0.096450532,0.001,5,0.963452324],
          ["auc17",17,17,1.917404899,1.917404899,5.977790872,0.096450532,0.001,5,0.963452324], ["auc18",18,18,1.917404899,1.917404899,5.977790872,0.096450532,0.003,5,0.963452324],
          ["auc19",19,19,1.917404899,1.917404899,5.977790872,0.096450532,0.002,5,0.963452324], ["auc20",20,20,1.930095019,1.930095019,5.629272273,0.091340885,0.002,6,0.791167648],
          ["auc21",21,21,1.930095019,1.930095019,5.629272273,0.091340885,0.002,6,0.791167648], ["auc22",22,22,1.930095019,1.930095019,5.629272273,0.091340885,0.002,6,0.791167648],
          ["auc23",23,23,1.930095019,1.930095019,5.629272273,0.091340885,0.002,6,0.791167648], ["auc24",24,24,1.930095019,1.930095019,5.629272273,0.091340885,0.002,6,0.791167648],
          ['auc25',25,25,2.165301364,2.165301364,6.051723999,0.097527089,0.001,7,1], ['auc26',26,26,2.165301364,2.165301364,6.051723999,0.097527089,0.002,7,1],
          ["auc27",27,27,2.165301364,2.165301364,6.051723999,0.097527089,0.002,7,1], ["auc28",28,28,2.165301364,2.165301364,6.051723999,0.097527089,0.001,7,1],
          ["auc29",29,29,2.165301364,2.165301364,6.051723999,0.097527089,0.001,7,1], ["auc30",30,30,1.991725792,1.991725792,5.391182295,0.087816883,0.003,8,0.673471619],
          ["auc31",31,31,1.991725792,1.991725792,5.391182295,0.087816883,0.001,8,0.673471619], ["auc32",32,32,1.991725792,1.991725792,5.391182295,0.087816883,0.001,8,0.673471619],
          ["auc33",33,33,1.991725792,1.991725792,5.391182295,0.087816883,0.002,8,0.673471619], ["auc34",34,34,1.991725792,1.991725792,5.391182295,0.087816883,0.001,8,0.673471619],
          ["auc35",35,35,1.978078888,1.978078888,5.1382786,0.08404356,0.002,9,0.548452664], ["auc36",36,36,1.978078888,1.978078888,5.1382786,0.08404356,0.001,9,0.548452664],
          ["auc37",37,37,1.978078888,1.978078888,5.1382786,0.08404356,0.001,9,0.548452664], ["auc38",38,38,1.978078888,1.978078888,5.1382786,0.08404356,0.001,9,0.548452664],
          ["auc39",39,39,1.472685438,1.472685438,4.640410899,0.076523408,0.003,10,0.302339612], ["auc40",40,40,1.472685438,1.472685438,4.640410899,0.076523408,0.004,10,0.302339612],
          ["auc41",41,41,1.472685438,1.472685438,4.640410899,0.076523408,0.002,10,0.302339612], ["auc42",42,42,1.472685438,1.472685438,4.640410899,0.076523408,0.006,10,0.302339612],
          ["auc43",43,43,1.472685438,1.472685438,4.640410899,0.076523408,0.003,10,0.302339612], ["auc44",44,44,1.421505065,1.421505065,4.367524859,0.072348914,0.003,11,0.167442699],
          ["auc45",45,45,1.421505065,1.421505065,4.367524859,0.072348914,0.004,11,0.167442699], ["auc46",46,46,1.421505065,1.421505065,4.367524859,0.072348914,0.003,11,0.167442699],
          ["auc47",47,47,1.421505065,1.421505065,4.367524859,0.072348914,0.002,11,0.167442699], ["auc48",48,48,1.338386567,1.338386567,4.094741471,0.068138099,0.01,12,0.032596531],
          ["auc49",49,49,1.338386567,1.338386567,4.094741471,0.068138099,0.008,12,0.032596531], ['auc50',50,50,1.338386567,1.338386567,4.094741471,0.068138099,0.005,12,0.032596531],
          ["auc51",51,51,1.338386567,1.338386567,4.094741471,0.068138099,0.01,12,0.032596531], ["auc52",52,52,1.398705618,1.398705618,4.216689123,0.070025257,0.003,13,0.092879431],
          ["auc53",53,53,1.398705618,1.398705618,4.216689123,0.070025257,0.004,13,0.092879431], ["auc54",54,54,1.398705618,1.398705618,4.216689123,0.070025257,0.001,13,0.092879431],
          ["auc55",55,55,1.398705618,1.398705618,4.216689123,0.070025257,0.005,13,0.092879431], ["auc56",56,56,1.518163076,1.518163076,4.520002904,0.074686099,0.001,14,0.242817818],
          ["auc57",57,57,1.518163076,1.518163076,4.520002904,0.074686099,0.002,14,0.242817818], ["auc58",58,58,1.518163076,1.518163076,4.520002904,0.074686099,0.001,14,.242817818],
          ["auc59",59,59,1.518163076,1.518163076,4.520002904,0.074686099,0.001,14,0.242817818], ["auc60",60,60,1.563468015,1.563468015,4.554030111,0.075206061,0.002,15,0.259638631],
          ["auc61",61,61,1.563468015,1.563468015,4.554030111,0.075206061,0.002,15,0.259638631], ["auc62",62,62,1.563468015,1.563468015,4.554030111,0.075206061,0.001,15,0.259638631],
          ["auc63",63,63,1.698382836,1.698382836,4.907483328,0.080572748,0.001,16,0.434362658], ["auc64",64,64,1.698382836,1.698382836,4.907483328,0.080572748,0.001,16,0.434362658],
          ["auc65",65,65,1.698382836,1.698382836,4.907483328,0.080572748,0.001,16,0.434362658], ["auc66",66,66,1.698382836,1.698382836,4.907483328,0.080572748,0.001,16,0.434362658],
          ["auc67",67,67,1.702033903,1.702033903,4.897165434,0.080416968,0.001,17,0.42926217], ["auc68",68,68,1.702033903,1.702033903,4.897165434,0.080416968,0.001,17,0.42926217],
          ["auc69",69,69,1.702033903,1.702033903,4.897165434,0.080416968,0.001,17,0.42926217], ["auc70",70,70,1.702033903,1.702033903,4.897165434,0.080416968,0.003,17,0.42926217],
          ["auc71",71,71,1.690438471,1.690438471,4.538350011,0.07496653,0.003,18,0.251887421], ["auc72",72,72,1.690438471,1.690438471,4.538350011,0.07496653,0.001,18,0.251887421],
          ["auc73",73,73,1.690438471,1.690438471,4.538350011,0.07496653,0.002,18,0.251887421], ["auc74",74,74,1.695534991,1.695534991,4.530313663,0.074843717,0.001,19,0.247914779],
          ["auc75",75,75,1.695534991,1.695534991,4.530313663,0.074843717,0.002,19,0.247914779], ["auc76",76,76,1.695534991,1.695534991,4.530313663,0.074843717,0.002,19,0.247914779],
          ["auc77",77,77,1.695534991,1.695534991,4.530313663,0.074843717,0.002,19,0.247914779], ["auc78",78,78,1.32008164,1.32008164,4.450655817,0.073624608,0.002,20,0.208537178],
          ["auc79",79,79,1.32008164,1.32008164,4.450655817,0.073624608,0.002,20,0.208537178], ["auc80",80,80,1.32008164,1.32008164,4.450655817,0.073624608,0.003,20,0.208537178],
          ["auc81",81,81,1.382281982,1.382281982,4.571790982,0.07547723,0.001,21,0.268418438], ["auc82",82,82,1.382281982,1.382281982,4.571790982,0.07547723,0.003,21,0.268418438],
          ["auc83",83,83,1.382281982,1.382281982,4.571790982,0.07547723,0.002,21,0.268418438], ["auc84",84,84,1.357649286,1.357649286,4.318142052,0.071589441,0.003,22,0.143031087],
          ["auc85",85,85,1.357649286,1.357649286,4.318142052,0.071589441,0.003,22,0.143031087], ["auc86",86,86,1.357649286,1.357649286,4.318142052,0.071589441,0.004,22,0.143031087],
          ["auc87",87,87,1.357649286,1.357649286,4.318142052,0.071589441,0.002,22,0.143031087], ["auc88",88,88,1.360228599,1.360228599,4.303064892,0.071357317,0.004,23,0.13557793],
          ["auc89",89,89,1.360228599,1.360228599,4.303064892,0.071357317,0.003,23,0.13557793], ["auc90",90,90,1.360228599,1.360228599,4.303064892,0.071357317,0.003,23,0.13557793],
          ["auc91",91,91,1.427837941,1.427837941,4.483932605,0.074134277,0.003,24,0.224987034], ["auc92",92,92,1.427837941,1.427837941,4.483932605,0.074134277,0.001,24,0.224987034],
          ["auc93",93,93,1.427837941,1.427837941,4.483932605,0.074134277,0.002,24,0.224987034], ["auc94",94,94,1.40251951,1.40251951,4.432874718,0.073352041,0.001,25,0.199747372],
          ["auc95",95,95,1.40251951,1.40251951,4.432874718,0.073352041,0.002,25,0.199747372], ["auc96",96,96,1.40251951,1.40251951,4.432874718,0.073352041,0.003,25,0.199747372],
          ["auc97",97,97,1.40251951,1.40251951,4.432874718,0.073352041,0.002,25,0.199747372], ["auc98",98,98,1.40251951,1.40251951,4.432874718,0.073352041,0.001,25,0.199747372],
          ["auc99",99,99,1.40251951,1.40251951,4.432874718,0.073352041,0.002,25,0.199747372], ["auc100",100,100,1.40251951,1.40251951,4.432874718,0.073352041,0.003,25,0.199747372]],
    columns=["test","order",'auc',"SumsOfSqs",'MeanSqs',"F.model","R2","Pval","N.taxa","F.model.scale"],
    dtype=object
) # Suffices to test with first five lines of file
exp_auc = pd.DataFrame(
    data=[["auc1",3], ["auc2",3], ["auc3",3], ["auc4",3], ["auc5",3], ["auc6",3], ["auc7",4], ["auc8",4], ["auc9",4], ["auc10",4],
          ["auc11",4], ["auc12",4], ["auc13",4], ["auc14",5], ["auc15",5], ["auc16",5], ["auc17",5], ["auc18",5], ["auc19",5], ["auc20",6],
          ["auc21",6], ["auc22",6], ["auc23",6], ["auc24",6], ['auc25',7], ["auc26",7], ["auc27",7], ["auc28",7], ["auc29",7], ["auc30",8],
          ["auc31",8], ["auc32",8], ["auc33",8], ["auc34",8], ["auc35",9], ["auc36",9], ["auc37",9], ["auc38",9], ["auc39",10], ["auc40",10],
          ["auc41",10], ["auc42",10], ["auc43",10], ["auc44",11], ["auc45",11], ["auc46",11], ["auc47",11], ["auc48",12], ["auc49",12], ["auc50",12],
          ["auc51",12], ["auc52",13], ["auc53",13], ["auc54",13], ["auc55",13], ["auc56",14], ["auc57",14], ["auc58",14], ["auc59",14], ["auc60",15],
          ["auc61",15], ["auc62",15], ["auc63",16], ["auc64",16], ["auc65",16], ['auc66',16], ["auc67",17], ['auc68',17], ["auc69",17], ["auc70",17],
          ["auc71",18], ["auc72",18], ["auc73",18], ["auc74",19], ["auc75",19], ["auc76",19], ["auc77",19], ["auc78",20], ["auc79",20], ["auc80",20],
          ["auc81",21], ["auc82",21], ["auc83",21], ["auc84",22], ["auc85",22], ['auc86',22], ["auc87",22], ["auc88",23], ["auc89",23], ["auc90",23],
          ["auc91",24], ["auc92",24], ["auc93",24], ["auc94",25], ["auc95",25], ["auc96",25], ["auc97",26], ["auc98",26], ["auc99",26], ["auc100",25]],
    columns=["auc","otu.num"]
)


class WinnowedFormatTests(unittest.TestCase):

    package = 'q2_winnowing.tests'

    # test class layout referenced from:
    #   https://github.com/qiime2-graveyard/q2-dummy-types/blob/master/q2_dummy_types/tests/test_mapping.py

    def test_data_import(self):
        fp = pkg_resources.resource_filename(
            'q2_winnowing.tests', 'sample_data/test_in_dir')

        # `Artifact.import_data` copies `test_in_featureData.tsv` into the artifact after
        # performing validation on the file.
        artifact = Artifact.import_data(Winnowed, fp)

        self.assertEqual(artifact.type, Winnowed)
        self.assertIsInstance(artifact.uuid, uuid.UUID)

        # <><> END OF FUNCTION <><>


    def test_reader_transformer(self):
        fp = pkg_resources.resource_filename(
            'q2_winnowing.tests', 'sample_data/test_in_dir')

        artifact = Artifact.import_data(Winnowed, fp)
        featureOrdering_df, auc_df, permanova_df = artifact.view( type([]) )[0]
        # `Artifact.view` invokes the transformer that handles the
        # `WinnowedFormat` -> `dataframe` transformation.
        # print( featureOrdering_df, exp_featureOrdering )
        pd.testing.assert_frame_equal(
            featureOrdering_df.astype(type("")),
            exp_featureOrdering.astype(type("")),
            check_dtype=False
        ) # Avoid checking values since reading df stores as objects while, hard coding in does not
        # ex) bool(False) == Object(False) in pandas is False although the values function the same.
        pd.testing.assert_frame_equal(
            auc_df.astype(type("")),
            exp_auc.astype(type("")),
            check_dtype=False
        )
        pd.testing.assert_frame_equal(
            permanova_df.astype(type("")),
            exp_permanova.astype(type("")),
            check_dtype=False
        )

        # <><> END OF FUNCTION <><>



    def test_writer_transformer(self):
        # `Artifact._from_view` invokes transformer that handles `dataframe` ->
        # `WinnowedFormat`, because the `WinnowedDirectoryFormat` has
        # been registered as the directory format for the semantic type.
        artifact = Artifact._from_view(Winnowed, [(exp_featureOrdering, exp_auc, exp_permanova)],
                                       list, archive.ImportProvenanceCapture())

        # Test that the directory and file format can be read again.
        got_featureOrdering, got_auc, got_permanova = artifact.view(type([]))[0]
        pd.testing.assert_frame_equal(
            got_featureOrdering.astype(type("")),
            exp_featureOrdering.astype(type("")),
            check_dtype=False
        ) # Avoid checking values since reading df stores as objects while, hard coding in does not
        # ex) bool(False) == Object(False) in pandas is False although the values function the same.
        pd.testing.assert_frame_equal(
            got_auc.astype(type("")),
            exp_auc.astype(type("")),
            check_dtype=False
        )
        pd.testing.assert_frame_equal(
            got_permanova.astype(type("")),
            exp_permanova.astype(type("")),
            check_dtype=False
        )

        # <><> END OF FUNCTION <><>



if __name__ == "__main__":
    unittest.main()